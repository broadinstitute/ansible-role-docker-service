import subprocess
import re
import logging
import time

import polling

owner = "{{ instance_labels.owner }}"
app = "{{ instance_labels.app }}"
hostname = "{{ ansible_hostname }}"
app_dir = "{{ docker_service_app_directory }}"
health_check_cmd = "{{ docker_service_health_check }}"
health_timeout = {{ docker_service_health_timeout }}

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s:%(message)s"
)

def run_cmd(cmd):
    result = subprocess.run(
        cmd,
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT
    )
    output = result.stdout.decode('utf-8')

    if result.returncode != 0:
        logging.error('Ran command: %s' % cmd)
        logging.error("Command output:\n%s" % output)
        exit(1)

    return output

def config_changed():
    changes = re.findall(r'^Would.+', rsync_config(dry_run=True), re.MULTILINE)
    changed = (
        len(changes) != 0 and
        # gsutil dry-run sometimes shows the root app folder as a change when there really are no changes
        not (
            len(changes) == 1 and
            changes[0].split()[-1] == "file://%s/" % app_dir
        )
    )
    if changed:
        logging.debug("Changes found:\n%s" % changes)
    return changed

def docker_compose_down():
    run_cmd('/usr/local/bin/docker-compose -f %s/docker-compose.yaml down' % app_dir)

def wipe_app_dir():
    run_cmd('rm -rf %s' % app_dir)

def rsync_config(dry_run=False):
    rsync_options = '-r -d'
    rsync_options += ' -n' if dry_run else ''
    rsync_cmd = "gsutil rsync %s gs://%s-%s-config/%s/configs %s 2>&1" % (
        rsync_options,
        owner,
        app,
        hostname,
        app_dir
    )

    return run_cmd(rsync_cmd)

def docker_compose_up():
    run_cmd('/usr/local/bin/docker-compose -f %s/docker-compose.yaml up -d' % app_dir)

def update_service():
    logging.debug("Updating service")
    docker_compose_down()
    wipe_app_dir()
    rsync_config()
    docker_compose_up()

def health_check(step=10, timeout=60):
    logging.debug("Polling for health for up to %i seconds" % timeout)
    polling.poll(
        lambda: subprocess.run(
                health_check_cmd,
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT
            ).returncode == 0,
        step=step,
        timeout=timeout
    )
    logging.debug("Service is healthy.")

if config_changed():
    update_service()
    health_check(timeout=health_timeout)
